from machine import Pin, I2C, ADC, PWM
from struct import unpack
from time import sleep
import utime
import math
from pimoroni import Button
from picographics import PicoGraphics, DISPLAY_PICO_DISPLAY, PEN_P4


adc = ADC(Pin(27))
pwm = PWM(Pin(9))
pwm.freq(100000)
ina_i2c = I2C(0, scl=Pin(1), sda=Pin(0), freq=100000) 
display = PicoGraphics(display=DISPLAY_PICO_DISPLAY, pen_type=PEN_P4, rotate=0)
display.set_backlight(0.5)
display.set_font("bitmap8")
WHITE = display.create_pen(255, 255, 255)
BLACK = display.create_pen(0, 0, 0)
MAGENTA = display.create_pen(255, 0, 255)
GREEN = display.create_pen(0, 255, 0)
button_a = Button(12)
button_b = Button(13)
button_x = Button(14)
button_y = Button(15)
global SHUNT_OHMS
SHUNT_OHMS = 0.12
state = 0
RFUDGE = 0.14 #not meant to be here (inside resistance of ina)


def saturate(duty):
    if duty > 90:
        duty = 90
    if duty < 5:
        duty = 5
    return duty
    
def clear():
    display.set_pen(BLACK)
    display.clear()
    display.update()
    
class ina219: 
    REG_CONFIG = 0x00
    REG_SHUNTVOLTAGE = 0x01
    REG_BUSVOLTAGE = 0x02
    REG_POWER = 0x03
    REG_CURRENT = 0x04
    REG_CALIBRATION = 0x05
    
    def __init__(self,sr, address, maxi):
        self.address = address
        self.shunt = sr
            
    def vshunt(icur):
        # Read Shunt register 1, 2 bytes
        reg_bytes = ina_i2c.readfrom_mem(icur.address, icur.REG_SHUNTVOLTAGE, 2)
        reg_value = int.from_bytes(reg_bytes, 'big')
        if reg_value > 2**15: #negative
            sign = -1
            for i in range(16): 
                reg_value = (reg_value ^ (1 << i))
        else:
            sign = 1
        return (float(reg_value) * 1e-5 * sign)
        
    def vbus(ivolt):
        # Read Vbus voltage
        reg_bytes = ina_i2c.readfrom_mem(ivolt.address, ivolt.REG_BUSVOLTAGE, 2)
        reg_value = int.from_bytes(reg_bytes, 'big') >> 3
        return float(reg_value) * 0.004
        
    def configure(conf):
        #ina_i2c.writeto_mem(conf.address, conf.REG_CONFIG, b'\x01\x9F') # PG = 1
        ina_i2c.writeto_mem(conf.address, conf.REG_CONFIG, b'\x09\x9F') # PG = /2
        ina_i2c.writeto_mem(conf.address, conf.REG_CALIBRATION, b'\x00\x00')
        
while True:
    if state == 0:
        
        print("setup")
        sleep(1)
        ina = ina219(SHUNT_OHMS, 68, 5)
        ina.configure()
        ina2 = ina219(SHUNT_OHMS, 64, 5)
        ina2.configure()
        happy_state = 1
        duty_state = 2
        mppt_state = 3
        next_state = happy_state
        clear()

    elif state == happy_state:
        print("happy")
        display.set_pen(WHITE)
        display.text("Choose", 60, 10, 240, 4)
        display.text("State:", 65, 50, 240, 4)#fix to show options
        display.set_pen(MAGENTA)
        display.text("POT", 0, 90, 240, 4)
        display.set_pen(GREEN)
        display.text("MPPT", 150, 90, 240, 4)
        display.update()
        duty = adc.read_u16()
        dutyval = (duty * (100 / 65535))
        pwm.duty_u16(duty)
        v = ina.vbus()
        i = 1000*(ina.vshunt())/SHUNT_OHMS
        Pold = -v*i
        auto = 1
        once = 0
        inc = 0
        int(inc)
        
        if button_y.read(): #mppt next
            next_state = mppt_state
            clear()
            display.set_pen(WHITE)
            display.text("A:", 10, 1, 240, 4)
            display.text("B:", 10, 36, 240, 4)
            display.text("DUTY:", 10, 71, 240, 4)
            display.set_pen(GREEN)
            display.text("MPPT AUTO", 10, 105, 240, 4)
            display.update()
        elif button_b.read(): #pot next
            next_state = duty_state
            clear()
            display.set_pen(WHITE)
            display.text("A:", 10, 1, 240, 4)
            display.text("B:", 10, 36, 240, 4)
            display.text("DUTY:", 10, 71, 240, 4)
            display.set_pen(MAGENTA)
            display.text("MANUAL STATE", 10, 105, 240, 4)
            display.update()
        else:
            next_state = happy_state
            
            
    elif state == mppt_state:
    
        if button_x.read(): #increment mppt state
            auto = 0
            once = 1
            dutyval = 5
            display.set_clip(0,105,240,36)
            clear()
            display.set_pen(GREEN)
            display.text("MPPT TRIG", 10, 105, 240, 4)
            display.remove_clip()
            
        if button_y.read(): # auto mppt state
            auto = 1
            once = 0
            display.set_clip(0,105,240,36)
            clear()
            display.set_pen(GREEN)
            display.text("MPPT AUTO", 10, 105, 240, 4)
            display.remove_clip()
            
        i = (ina.vshunt())/SHUNT_OHMS
        v = ina.vbus() + RFUDGE*i
        v2 = ina2.vbus()+ina2.vshunt()
        i2 = -(ina2.vshunt())/SHUNT_OHMS
        imA = i*1000
        i2mA = i2*1000
        PnewmW = v*imA
        display.set_clip(50,0,240,70)
        clear()
        display.set_pen(WHITE)
        display.text("%.2fV" % v, 50, 1, 240, 4)
        display.text("%.0fmW" % PnewmW, 50, 36, 240, 4)
        display.remove_clip()
             
        if auto == 1 or once == 1:
            if PnewmW < 10:
                dutyval = dutyval - 5
            else:
                if Pold > PnewmW+2 :
                    if inc == 0:
                        dutyval = dutyval + 1
                        inc = inc + 1
                    elif inc == 1:
                        dutyval = dutyval - 1
                        inc = inc - 1
                elif Pold < PnewmW-2:
                    if inc == 0:
                        dutyval = dutyval - 1
                    elif inc == 1:
                        dutyval = dutyval + 1      
            dutyval = saturate(dutyval)    
            duty = int(dutyval * (65535 / 100))
            pwm.duty_u16(duty)
            display.set_clip(120,71,120,29)
            clear()
            display.set_pen(WHITE)
            display.text("%.0f" % dutyval, 120, 71, 240, 4)
            display.remove_clip()
            once = 0
        
        
        Pold = PnewmW        
        display.update()
        if button_b.read():
            next_state = duty_state
            display.set_clip(0,105,240,36)
            clear()
            display.set_pen(MAGENTA)
            display.text("MANUAL STATE", 10, 105, 240, 4)
            display.remove_clip()
            display.update()
        else:
            next_state = state
           
    elif state == duty_state: #completed it
        
        i = (ina.vshunt())/SHUNT_OHMS
        v = ina.vbus() + RFUDGE*i
        v2 = ina2.vbus()+ina2.vshunt()
        i2 = -(ina2.vshunt())/SHUNT_OHMS
        duty = adc.read_u16()
        pwm.duty_u16(duty) 
        dutyval = (duty * (100 / 65535))
        imA = i*1000
        i2mA = i2*1000
        
        display.set_clip(50,0,240,70)
        clear()
        display.set_pen(WHITE)
        display.text("%.2fV" % v, 50, 1, 240, 4)
        display.text("%.0fmA" % imA , 150, 1, 240, 4)
        display.text("%.2fV" % v2, 50, 36, 240, 4)
        display.text("%.0fmA" % i2mA, 150 , 36, 240, 4)
        display.remove_clip()
         
        display.set_clip(120,71,120,29)
        clear()
        display.set_pen(WHITE)
        display.text("%.0f" % dutyval, 120, 71, 240, 4)
        display.remove_clip()
        
        display.update()
        
        if button_y.read():
            next_state = mppt_state
            display.set_clip(0,105,240,36)
            clear()
            display.set_pen(GREEN)
            display.text("MPPT AUTO", 10, 105, 240, 4)
            display.remove_clip()
            display.update()
        else:how do
            next_state = state
            
    state = next_state
    sleep(0.1)

Â 

